from __future__ import print_function
import json
import numpy as np
import  matplotlib.pyplot as plt
import time

class MKP(object):
    """MKP model"""

    def __init__(self):
        super(MKP, self).__init__()
        
    def read_json(self, path):
        with open(path) as f:
            data = json.load(f)
        w = [item['w'] for item in data['items']]
        p = [item['p'] for item in data['items']]
        t = [item['t'] for item in data['items']]
        r = [item['r'] for item in data['items']]
        self.D = [item['binIndices'] for item in data['items']]

        LW = [pack['minLoad'] for pack in data['bins']]
        W = [pack['capacity'] for pack in data['bins']]
        P = [pack['p'] for pack in data['bins']]
        T = [pack['t'] for pack in data['bins']]
        R = [pack['r'] for pack in data['bins']]
        
        self.N = len(w)
        self.NT = max(t)+1
        self.NR = max(r)+1
        self.w = np.array(w)
        self.p = np.array(p)
        self.t = np.array(t)
        self.r = np.array(r)

        self.M = len(W)
        self.LW = np.array(LW)
        self.W = np.array(W)
        self.P = np.array(P)
        self.T = np.array(T)
        self.R = np.array(R)
        print('DATA: N = %d, M = %d' % (self.N, self.M))
    
    def preprocess(self):
        self._group_by()
        self._filter_by_r()
        self._filter_by_bin()
        self._filter_by_r1()
        print('\nMAX AVAILABLE ITEM: ', self.N - len(np.where([len(t)==0 for t in self.D])[0]))
    
    def _group_by(self):
        self.t_id = np.unique(sorted(self.t))
        self.r_id = np.unique(sorted(self.r))        

    def _filter_by_r(self):
        if not np.all(self.R == 1): return

        # weight rs
        r_item = [np.where(self.r==j)[0] for j in self.r_id]
        r_w = np.array([sum(self.w[item]) for item in r_item])

        # filter rs
        remove_r = np.where(r_w < min(self.LW))[0]
        remove_item = []
        for idx in remove_r:
            remove_item.extend(r_item[idx])

        # remove
        for item in remove_item:
            self.D[item] = []

        print('\nREMOVE INVALID ITEM:')
        print('+ Num remove_r = %d' % len(remove_r))
        print('- Num remove_item = %d' % len(remove_item))
        return remove_item

    def _filter_by_bin(self):
        # filter bin W <= LW or W <= 0 or P <= 0
        remove_bin_dummy0 = set(np.where(self.W <= self.LW)[0])
        remove_bin_dummy1 = set(np.where(self.W <= 0)[0])
        remove_bin_dummy2 = set(np.where(self.P <= 0)[0])

        # group item by bin
        BinItem = np.zeros((self.N,self.M))
        for i in range(self.N):
            BinItem[i, self.D[i]] = 1

        # filter bin have w (group by t) < LW
        remove_bin_t = []
        remove_bin_r = []

        for b in range(self.M):
            item_id = np.where(BinItem[:,b] == 1)[0]

            # group by t
            t_id = np.unique(self.t[item_id])
            t_item = [item_id[np.where(self.t[item_id] == idx)[0]] for idx in t_id]
            t_w = [sum(self.w[item]) for item in t_item]
            t_w_limit = sorted(t_w)[-self.T[b]:]

            # group by r
            r_id = np.unique(self.r[item_id])
            r_item = [item_id[np.where(self.r[item_id] == idx)[0]] for idx in r_id]
            r_w = [sum(self.w[item]) for item in r_item]
            r_w_limit = sorted(r_w)[-self.R[b]:]
            
            if sum(t_w_limit) < self.LW[b]: remove_bin_t.append(b)
            if sum(r_w_limit) < self.LW[b]: remove_bin_r.append(b)

        # all filtered bin
        remove_bin = remove_bin_dummy0.union(remove_bin_dummy1).union(remove_bin_dummy2).union(set(remove_bin_t)).union(set(remove_bin_r))
        
        # remove bin
        D1 = []
        for bin_id in self.D:
            bin_id1 = [t for t in bin_id if t not in remove_bin]
            D1.append(bin_id1)
        self.D = D1

        print('\nREMOVE INVALID BIN:')
        print('+ Num remove_bin dummy 0 = %d' % len(remove_bin_dummy0))
        print('+ Num remove_bin dummy 1 = %d' % len(remove_bin_dummy1))
        print('+ Num remove_bin dummy 2 = %d' % len(remove_bin_dummy2))
        print('+ Num remove_bin by t = %d' % len(remove_bin_t))
        print('+ Num remove_bin by r = %d' % len(remove_bin_r))
        print('- Num remove_bin all = %d' % len(remove_bin))
        return remove_bin

    def _filter_by_r1(self):
        if not np.all(self.R == 1): return 
        print('\nREMOVE INVALID BIN IN EACH R:')
        # group item by r
        for idx in self.r_id:
            r_item = np.where(self.r==idx)[0]
            r_w = sum(self.w[r_item])

            # all available bin of r_item
            r_bin = []
            for item in r_item:
                r_bin.extend(self.D[item])
            r_bin = np.unique(r_bin)

            # filter bin: LW[bin] > r_weight
            r_bin_lw = np.array([self.LW[j] for j in r_bin])
            remove_bin = r_bin[r_bin_lw > r_w]
            
            # remove bin
            for item in r_item:
                self.D[item] = [t for t in self.D[item] if t not in remove_bin]

            print('- R=%3d has %4d item, n_remove_bin= %3d /%4d' % (idx, len(r_item), len(remove_bin),len(r_bin)))

    def init_model(self):
        self._add_fake_bin()
        self.t_item = {j: set(np.where(self.t==j)[0]) for j in self.t_id}
        self.r_item = {j: set(np.where(self.r==j)[0]) for j in self.r_id}

        # variables
        # init to non-pack
        self.x = np.ones(self.N, np.int16) * (self.M-1)

        # constraint
        self.vio = 0
        self.w_current = np.zeros(self.M)
        self.p_current = np.zeros(self.M)
        self.lw_remain = self.LW - self.w_current

        self.t_count = np.zeros(self.M)
        self.r_count = np.zeros(self.M)
        self.t_bin_current = np.zeros((self.M, self.NT))
        self.r_bin_current = np.zeros((self.M, self.NR))

    def _add_fake_bin(self):
        self.M += 1
        self.LW = np.append(self.LW,sum(self.w))
        self.W =np.append(self.W,sum(self.w))
        self.P =np.append(self.P,sum(self.p))
        self.T =np.append(self.T, self.NT)
        self.R =np.append(self.R, self.NR)
        print('\nADD FAKE BIN: new M = %d' % self.M)

    def set_value_propagate(self, item, bin):
        self.x[item] = bin
        self.update_constraint()

    def set_swap_propagate(self, item1, item2):
        pass

    def get_assign_delta(self):
        pass

    def get_swap_delta(self):
        pass

    def update_constraint(self):
        bin_id = np.unique(self.x)
        for bin in bin_id:
            bin_item = np.where(self.x == bin)[0]
            bin_w = sum(self.w[bin_item])
            bin_p = sum(self.p[bin_item])
            t_id = np.unique(self.t[bin_item])
            r_id = np.unique(self.r[bin_item])
            self.w_current[bin] = bin_w
            self.lw_remain[bin] = np.maximum(self.LW[bin] - bin_w, 0)
            self.t_count = len(t_id)
            self.t_bin_current[bin,:] = 0
            self.t_bin_current[bin, t_id] = 1
            self.r_count = len(r_id)
            self.r_bin_current[bin,:] = 0
            self.r_bin_current[bin, r_id] = 1
        vio_LW = self.LW - self.w_current
        vio_W = self.w_current - self.W
        vio_P = self.p_current - self.P
        vio_T = self.t_count - self.T
        vio_R = self.r_count - self.R
        return vio_LW + vio_W + vio_P + vio_T + vio_R

    def update_constraint_greedy(self, item, bin):
        self.w_current[bin] += self.w[item]
        self.lw_remain[bin] -= self.w[item]
        if self.lw_remain[bin] < 0: self.lw_remain[bin] = 0

        if self.t_bin_current[bin, self.t[item]] == 0:
            self.t_bin_current[bin, self.t[item]] = 1
            self.t_count[bin] += 1
        if self.r_bin_current[bin, self.r[item]] == 0:
            self.r_bin_current[bin, self.r[item]] = 1
            self.r_count[bin] += 1    

    def is_valid(self, item, bin):
        if self.t_bin_current[bin, self.t[item]] == 0:
            if self.t_count[bin] == self.T[bin]: return False
        if self.r_bin_current[bin, self.r[item]] == 0:
            if self.r_count[bin] == self.R[bin]: return False
        if self.w_current[bin] + self.w[item] > self.W[bin]: return False
        return True

    def verify_result(self, x, unpack_id):
        bin_id = np.unique(x)
        ok_item = []
        ok_bin = []
        for bin in bin_id:
            if bin == unpack_id: continue
            bin_item = np.where(x == bin)[0]
            bin_w = sum(self.w[bin_item])
            bin_p = sum(self.p[bin_item])
            t_id = np.unique(self.t[bin_item])
            r_id = np.unique(self.r[bin_item])
            if len(r_id) <= self.R[bin] and len(t_id) <= self.T[bin]:
                if self.LW[bin] <= bin_w <= self.W[bin] and bin_p <= self.P[bin]:
                   ok_bin.append(bin)
                   ok_item.extend(bin_item)
        print('FEASIBLE BIN: %d / %d; ITEM: %d / %d ' % (len(ok_bin),len(bin_id), len(ok_item), self.N))
        return ok_item, ok_bin, bin_id

    def greedy_search(self):
        print('\nGREEDY SEARCH:')
        for r_idx in self.r_id:
            for t_idx in self.t_id:
                current_items = self.t_item[t_idx].intersection(self.r_item[r_idx])
                if len(current_items) == 0:
                    continue
                print(' -------\t\t %d - %d \t\t------- ' % (r_idx, t_idx))
                
                candidate_bins = [self.M-1]
                for item in current_items:
                    if len(self.D[item]) == 0:
                        continue
                    bins = candidate_bins.copy()
                    while len(bins) > 0:
                        idx = np.argmin(self.lw_remain[bins])
                        bin = bins.pop(idx)
                        if self.is_valid(item, bin):
                            self.x[item] = bin
                            print('\t - add item %d to bin %d' % (item, bin))
                            self.update_constraint_greedy(item, bin)
                            break
                    
                    if self.x[item] == self.M-1:
                        for bin in self.D[item]:
                            if self.is_valid(item, bin):
                                self.x[item] = bin
                                print('\t + add item %d to bin %d !!!' % (item, bin))
                                self.update_constraint_greedy(item, bin)
                                candidate_bins.append(bin)
                                break

    def greedy_refine(self):
        bin_id = np.unique(self.x)
        bad_item = []
        bad_bin = []
        for bin in bin_id:
            if bin == self.M-1: continue
            bin_item = np.where(self.x == bin)[0]
            bin_w = sum(self.w[bin_item])
            bin_p = sum(self.p[bin_item])
            t_id = np.unique(self.t[bin_item])
            r_id = np.unique(self.r[bin_item])
            is_bad = False
            if len(r_id) > self.R[bin]: is_bad = True
            if len(t_id) > self.T[bin]: is_bad = True
            if bin_w < self.LW[bin]: is_bad = True
            if bin_w > self.W[bin]: is_bad = True
            if bin_p > self.P[bin]: is_bad = True
            if is_bad:
               bad_bin.append(bin)
               bad_item.extend(bin_item)
        print('BAD BIN: %d / %d; ITEM: %d / %d ' % (len(bad_bin),len(bin_id), len(bad_item), self.N))
        self.x[bad_item] = self.M-1
        self.update_constraint()


path = 'data/MinMaxTypeMultiKnapsackInput-3000.json'
model = MKP()
model.read_json(path)
model.preprocess()
model.init_model()

model.greedy_search()
model.greedy_refine()
model.verify_result(model.x, model.M-1)


# print(model.D)
print(model.x)

# model.greedy_refine()
# x1k = [1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 9, 9, 1846, 9, 30, 30, 9, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 502, 502, 1846, 1846, 0, 0, 30, 0, 1846, 30, 1846, 30, 0, 0, 0, 0, 0, 0, 0, 0, 1846, 1846, 1846, 0, 1, 1, 1, 1, 1846, 1846, 1846, 1846, 8, 8, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 0, 30, 30, 30, 30, 30, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 30, 30, 30, 30, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 34, 1846, 34, 34, 0, 34, 0, 0, 0, 0, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 34, 34, 1846, 1846, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 1846, 1846, 1846, 1846, 1846, 1846, 1, 1, 1, 1, 4, 1, 4, 4, 34, 34, 34, 34, 34, 34, 34, 34, 1, 1, 1, 1, 34, 34, 34, 34, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 34, 30, 30, 8, 8, 1846, 1846, 1846, 1846, 4, 4, 4, 4, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1, 1, 1, 1, 1846, 1846, 1846, 1846, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 1846, 1846, 34, 34, 1846, 1846, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1846, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1846, 1846, 3, 1846, 3, 4, 8, 9, 8, 8, 8, 9, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 4, 4, 4, 4, 1846, 1846, 1846, 1846, 0, 0, 0, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 8, 1846, 1846, 1846, 1846, 1846, 8, 8, 9, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 20, 20, 9, 20, 20, 8, 9, 9, 9, 20, 20, 20, 20, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1846, 4, 4, 4, 4, 1846, 1846, 1846, 1846, 4, 4, 4, 4, 4, 4, 4, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 4, 4, 4, 4, 20, 20, 20, 4, 20, 20, 20, 20, 20, 20, 20, 20, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 20, 20, 20, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 8, 8, 8, 8, 8, 8, 8, 8, 1846, 1846, 34, 1846, 8, 1846, 8, 8, 20, 20, 20, 20, 1846, 20, 1846, 1846, 8, 8, 8, 8, 34, 34, 34, 34, 494, 494, 494, 494, 504, 504, 1846, 1846, 494, 494, 494, 494, 494, 494, 494, 494, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 494, 494, 494, 494, 504, 504, 504, 504, 504, 504, 504, 504, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 1846, 1846, 1846, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 0, 0, 0, 0, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 502, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 502, 504, 502, 502, 502, 502, 502, 502, 1, 1, 1, 1, 1846, 1, 1846, 1846, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]
# x1k_G2 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,649,-1,-1,-1,1763,-1,-1,-1,-1,-1,0,0,-1,0,30,30,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,89,-1,-1,-1,-1,89,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,30,30,30,86,12,30,30,1,1,30,1,30,30,30,30,1,1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,30,30,30,30,30,30,30,30,30,30,1,30,30,30,30,30,34,34,34,34,34,34,34,34,34,34,34,34,30,30,30,30,-1,-1,-1,-1,-1,-1,-1,-1,34,34,34,34,34,34,34,34,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,34,-1,34,34,1,34,1,1,1,1,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,34,34,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,34,34,34,34,34,34,34,34,34,34,34,34,34,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,1,2,2,30,30,30,30,30,30,1,1,1,3,2,3,2,2,34,34,34,34,34,34,34,34,3,3,3,1,34,34,34,34,2,2,2,2,2,2,2,2,0,0,0,34,30,30,0,0,-1,-1,-1,-1,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,3,3,3,3,-1,-1,-1,-1,3,3,3,3,3,3,3,3,0,0,34,34,34,34,34,34,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,30,30,30,30,30,-1,-1,-1,30,-1,-1,-1,-1,34,34,3,3,3,3,3,3,1,3,3,3,3,3,-1,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,-1,-1,2,-1,2,2,0,4,0,0,0,0,2,2,2,2,2,2,2,2,2,5,2,2,2,2,2,2,2,5,2,5,5,5,5,5,-1,-1,-1,-1,3,3,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-1,5,5,2,5,5,5,5,5,5,5,5,5,5,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,8,8,8,5,8,8,8,8,8,8,8,8,-1,-1,3,3,-1,-1,-1,-1,3,8,8,8,3,3,3,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,8,8,8,8,8,8,8,-1,-1,34,-1,8,34,8,8,8,8,8,8,8,8,8,8,8,8,8,-1,-1,-1,34,-1,-1,-1,-1,-1,503,503,503,503,-1,-1,-1,-1,-1,-1,-1,-1,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,-1,-1,-1,-1,-1,-1,503,503,503,-1,503,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,3,3,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,5,5,-1,5,-1,5,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,52,-1,-1,-1,-1,-1,-1,3,3,3,3,-1,3,-1,-1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
# x3k_G2 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,37,-1,37,37,37,37,-1,-1,37,-1,0,0,-1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,-1,-1,1,1,2,2,1,2,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,2,2,2,2,2,-1,-1,-1,-1,0,0,3,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,3,3,3,3,3,3,4,3,4,4,2,4,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,4,4,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6,6,6,2,2,6,6,1,1,1,1,1,7,2,2,2,2,6,2,6,6,4,4,4,4,4,4,4,4,2,2,-1,-1,4,4,4,4,6,6,6,6,6,6,6,6,0,0,0,4,7,1,0,0,-1,-1,-1,-1,6,6,6,6,-1,-1,-1,-1,-1,8,-1,8,-1,-1,-1,-1,8,-1,8,8,-1,-1,-1,-1,-1,-1,-1,-1,0,0,4,4,4,4,4,4,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,6,6,6,6,6,6,6,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,7,7,7,7,7,7,7,7,1,7,7,7,7,4,4,-1,-1,-1,-1,-1,-1,-1,-1,2,2,-1,-1,7,-1,-1,-1,6,6,6,6,6,6,6,6,6,6,6,6,9,-1,6,9,6,6,0,10,0,10,10,10,6,6,6,6,6,6,6,6,6,6,6,6,6,11,11,11,11,11,6,11,11,11,11,11,9,9,9,9,-1,-1,-1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,9,9,9,9,9,0,0,10,0,0,0,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,10,10,10,10,10,0,0,10,10,10,10,10,10,10,12,12,10,12,12,12,12,12,12,12,12,12,12,-1,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,6,12,12,12,11,12,12,12,12,12,12,12,12,35,35,-1,-1,35,35,35,35,-1,12,12,12,-1,-1,-1,-1,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,12,12,12,12,12,12,12,12,-1,-1,4,-1,12,4,12,12,12,12,13,12,-1,12,13,13,13,13,13,13,4,14,4,4,-1,-1,-1,-1,-1,-1,-1,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,38,-1,-1,38,-1,-1,-1,-1,38,38,38,38,-1,38,38,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,11,11,11,11,11,15,15,15,11,15,15,15,15,15,15,-1,38,36,36,-1,36,36,36,-1,-1,-1,-1,5,-1,5,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,16,16,16,-1,16,16,16,16,16,16,16,-1,16,16,16,16,16,16,16,16,16,16,16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,1,7,9,9,9,9,9,9,9,9,7,7,7,7,7,7,7,7,9,9,9,9,9,9,9,9,9,9,9,9,9,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,13,13,-1,5,36,36,36,-1,15,15,15,15,13,15,13,13,37,37,-1,37,37,37,37,37,9,17,36,36,-1,-1,17,17,7,7,7,7,7,7,18,7,37,37,37,37,18,7,7,7,4,4,4,4,4,14,4,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,4,14,14,14,14,14,4,14,5,5,5,5,5,5,5,14,5,5,5,5,5,5,5,5,-1,-1,-1,-1,18,18,5,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,18,-1,-1,14,14,18,14,17,17,17,17,15,15,15,15,15,15,15,15,15,15,15,15,11,15,15,15,15,15,14,15,14,14,14,14,14,14,14,14,15,15,-1,8,15,15,19,15,35,35,19,19,35,35,35,35,35,35,35,35,35,35,35,35,17,16,20,35,17,17,17,17,3,3,3,3,35,35,35,35,3,3,3,3,3,3,3,3,3,3,5,3,3,3,3,3,-1,-1,-1,-1,-1,-1,-1,-1,14,14,14,4,14,14,14,14,14,14,14,14,14,14,14,14,35,14,14,14,14,14,21,14,35,35,35,35,35,35,35,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,21,21,21,21,21,21,5,22,-1,-1,-1,-1,-1,-1,-1,14,35,35,35,35,35,35,35,35,35,-1,-1,12,35,35,35,35,35,35,35,35,-1,-1,35,-1,35,35,35,35,35,35,35,35,8,8,8,8,8,8,8,8,8,8,8,8,8,-1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,22,22,22,22,22,22,22,22,22,22,22,22,22,22,5,22,8,8,8,8,22,22,22,22,5,5,22,22,22,22,22,22,-1,-1,-1,-1,-1,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,13,13,13,13,13,13,13,13,12,12,12,10,12,12,13,13,15,15,19,19,15,15,15,15,13,13,13,13,13,13,19,19,21,21,21,21,21,21,35,-1,21,21,21,21,21,21,21,21,12,12,13,13,13,13,12,-1,-1,13,13,13,13,21,21,21,13,16,21,21,13,13,13,13,13,23,13,23,13,13,23,23,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,17,17,37,37,17,17,17,17,17,17,17,17,17,17,9,17,17,17,17,17,17,17,17,17,13,13,17,13,23,12,13,23,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,37,37,37,37,37,37,37,37,37,37,37,37,-1,37,-1,-1,8,8,8,24,-1,24,8,24,-1,-1,-1,-1,24,27,24,8,21,21,21,21,21,21,25,25,13,23,23,23,23,23,25,25,23,23,23,23,23,23,23,23,17,17,17,17,17,23,23,23,17,17,17,17,17,17,17,17,-1,-1,-1,-1,17,35,35,35,-1,-1,23,-1,-1,-1,-1,-1,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-1,23,23,23,23,23,23,26,26,26,26,26,26,26,26,26,26,26,26,22,-1,-1,-1,-1,26,22,26,26,26,26,26,26,26,26,23,26,25,25,25,21,21,21,25,25,25,25,25,25,25,25,26,26,18,18,17,17,17,17,17,17,17,17,17,17,28,28,25,25,25,25,25,25,16,16,25,16,16,17,16,16,18,7,18,18,28,28,28,20,25,25,28,28,25,25,25,25,25,25,25,25,20,20,20,20,-1,20,20,20,20,20,20,20,20,20,16,20,26,26,23,26,26,26,26,26,20,26,20,20,26,26,26,26,20,20,20,20,20,20,20,20,28,26,28,28,20,20,20,16,28,28,25,25,25,25,25,25,20,28,28,28,28,28,28,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,8,24,8,8,24,24,24,28,28,28,28,26,26,28,28,28,-1,-1,-1,28,28,28,28,-1,-1,-1,-1,-1,-1,-1,-1,7,18,7,20,25,25,25,25,-1,25,25,25,-1,-1,-1,-1,24,24,-1,-1,8,24,24,24,24,-1,27,24,27,27,27,-1,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,25,25,25,25,25,20,29,29,29,20,20,3,3,3,3,26,26,26,26,25,26,25,25,25,25,25,25,26,26,26,26,26,26,26,30,26,26,30,30,30,30,3,3,25,25,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,19,19,-1,-1,-1,-1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,3,3,-1,-1,-1,-1,-1,24,-1,-1,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,3,3,3,3,3,3,3,-1,-1,-1,-1,-1,-1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,28,28,28,28,28,28,28,28,17,28,28,28,28,28,28,28,3,31,31,31,31,31,31,31,28,31,28,28,28,28,28,28,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,20,20,29,20,31,31,31,31,31,31,31,31,3,31,31,31,19,19,28,19,19,19,19,19,19,19,19,19,15,19,19,19,31,31,31,31,31,31,31,31,29,31,31,31,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,20,29,31,20,29,29,30,26,23,30,30,30,30,30,31,31,3,31,31,31,31,31,31,31,31,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,29,29,29,30,29,29,29,29,29,29,29,2,29,29,29,29,29,29,29,29,28,28,29,28,28,28,28,28,29,20,29,29,29,28,29,29,30,30,30,30,29,29,29,20,28,28,28,28,30,30,28,28,28,28,28,28,28,28,28,28,30,30,30,28,28,28,28,28,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-1,28,28,28,28,28,28,28,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,28,28,28,28,28,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,28,28,-1,-1,-1,-1,-1,-1,29,29,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1,-1,-1,-1,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,30,30,30,30,30,30,0,-1,-1,30,30,-1,-1,-1,-1,31,31,31,31,31,31,31,31,30,31,30,30,30,30,30,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,31,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,-1,-1,31,30,31,31,-1,-1,37,37,30,30,30,-1,30,30,30,30,-1,30,30,30,30,30,30,30,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,31,31,31,31,-1,-1,-1,-1,-1,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,37,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,30,30,30,-1,-1,-1,30,30,30,30,30,30,30,30,30,-1,-1,-1,-1,-1,-1,-1,-1,31,-1,-1,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,-1,-1,33,-1,-1,-1,-1,34,-1,-1,-1,-1,-1,-1,-1]
# model.verify_result(model.x, model.M-1)
